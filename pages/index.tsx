import { useEffect, useState } from 'react'
import type { NextPage, NextPageContext } from 'next'
import Head from 'next/head'
import verifyAuth from '../helpers/verify-auth'
import styles from '../styles/Home.module.css'
import { useContext } from 'react'
import AuthContext from '../components/auth-context'
import {getAuth } from "firebase-admin/auth";
import { getDatabase } from 'firebase-admin/database'
import FirebaseServer from '../helpers/firebase-server'
import { Button } from 'react-bootstrap'
import DataContext from "../components/data-context"
import ModalForm from '../components/modal-form/ModalForm'
import List from '../components/transactions/list'

const Home: NextPage = (props:any) => {
  const authCtx = useContext(AuthContext);
  const dataCtx = useContext(DataContext)
  const [show, setShow] = useState(false);

  useEffect(() => {
    if(!authCtx.user){
      authCtx.logout()
    }
    dataCtx.update_entries(props.data)
  }, [authCtx])

  const handleAdd = () => {
    setShow(true)
  }

  const addItem = (descript:string, date:string, amount:number, type:string, id?:any) => {
    console.log(id)
    dataCtx.add({
      id: "null",
      date: Math.floor(new Date(date).getTime()),
      description: descript,
      amt: type === "income" ? Math.abs(amount) : -1*Math.abs(amount)
    })
    setShow(false)
  }

  const closeModal = () => {setShow(false)}

  return (
    <div className={styles.container}>
      <Head>
        <title>AD Budget App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <ModalForm onConfirm={addItem} onCancel={closeModal} show={show} />
        <div>
          <Button className={styles.addBtn} onClick={handleAdd}>+ Add</Button>
          <List />
          </div>
      </main>
    </div>
  )
}

export const getServerSideProps = async ({req}: NextPageContext) => {
  try{
    if(req && req.headers && req.headers.cookie){ 
      const email = await verifyAuth(req.headers.cookie)
      if(!verifyAuth){
        console.log("verify auth failed...should redirect")
        return {
          redirect:{
            destination: "/login",
            permanent:false
          }
        }
      }
      // const dataCtx = useContext(DataContext)
      FirebaseServer();
      const {uid} = await getAuth().getUserByEmail(email)
      const db = getDatabase();
      const ref = db.ref(`users/${uid}/entries`);

      return new Promise((resolve, reject) => {
        ref.orderByChild("date").on('value', (snapshot) => {
          let dataList:any = []
          snapshot.forEach((child) => {
            dataList.push({id: child.key, ...child?.val()})
          })
          dataList = dataList.reverse()
          resolve({props: {data: dataList} })
        }, (errorObject) => {
          console.log('The read failed: ' + errorObject.name);
          reject({
            props: {data: "error"}
          })
        });
      })
    }
    else{
      return {
        redirect:{
          destination: "/login",
          permanent:false
        }
      }
    }
  } catch(err){
    return {
      redirect:{
        destination: "/login",
        permanent:false
      }
    }
  }
}

export default Home
